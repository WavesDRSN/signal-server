syntax = "proto3";

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

option java_multiple_files = true;
option java_package = "gRPC.v1";
option java_outer_classname = "UserConnectionProto";

service UserConnection {
  rpc LoadUsersList(stream UserConnectionRequest) returns (stream UserConnectionResponse);
  rpc UserDisconnect(DisconnectRequest) returns (DisconnectResponse);
  // Обмен SDP предложением и ответом
  rpc ExchangeSDP(stream SDPExchange) returns (stream SDPExchange);

  // Отправка группы ICE-кандидатов
  rpc SendIceCandidates(stream ICEExchange) returns (stream ICEExchange);
}

message DisconnectResponse {
  optional string text = 1;
}

message DisconnectRequest {
  string name = 1;
}

enum UserConnectionErrorCode {
  // Пустая строка имени
  INVALID_USERNAME = 0;
  // Истекло время ответа пакетов
  NOT_ALIVE = 1;
}

message UserConnectionExceptionResponse{
  // Когда появилась ошибка
  google.protobuf.Timestamp timestamp = 1;
  // Тип ошибки
  UserConnectionErrorCode error = 2;
}

message UserConnectionRequest{
  oneof user_connection_request_type{
    // Это сообщение должно быть отправлено при первом запросе
    InitialUserConnectionRequest initial_request = 1;

    // Отправка пакета жизни, чтобы подтвердить активность соединения
    // Пакет отправляется раз в промежуток указанный в InitialUserConnectionResponse
    AlivePacket still_alive = 2;
  }
}

message InitialUserConnectionRequest{
  // Имя пользователя, которое он сам выбрал
  string name = 1;
}

// Пакет жизни, который надо отправлять, чтобы подтверждать соединение
message AlivePacket{
  string kiss_of_the_poseidon = 1;
  google.protobuf.Timestamp timestamp = 2;
  // Метка когда создался пакет
}

message SDPExchange {
  oneof message_type {
    SessionDescription session_description = 1;
    SDPStreamInitialRequest initial_request = 2;
    SDPStreamInitialResponse initial_response = 3;
  }
}

message ICEExchange {
  oneof message_type {
    IceCandidatesMessage ice_candidates = 1;
    ICEStreamInitialRequest initial_request = 2;
    ICEStreamInitialResponse initial_response = 3;
  }
}

message UserConnectionResponse{
  oneof user_activity_response_type{
    // Это сообщение должно быть отправлено при первом подключении
    InitialUserConnectionResponse initial_response = 1;
    // Содержит список активных пользователей. Пользователь должен запросить список,
    // чтобы получить такой тип ответа
    UsersList users_list = 2;
  }
}

// Первичный ответ от сервера
message InitialUserConnectionResponse{
  // Интервал, который показывает как часто пользователь должен отправлять данные на сервер
  // чтобы подтверждать жизнедеятельность
  google.protobuf.Duration user_keep_alive_interval = 1;
  // Unique userKey for installing SDP and ICE streams
  string userKey = 2;
}

// Содержит список пользователей подключенных к серверу. Список должен обновлятся каждый раз
// когда подключается новый пользователь.
message UsersList{
  repeated User users = 1;
}

// Содержит информацию о пользователе - имя, IP, порт
message User{
  // Имя пользователя должно быть отлично от пустой строки
  string name = 1;
}

message SDPStreamInitialRequest {
  string key = 1;
}

message SDPStreamInitialResponse {
  bool approved = 1;
}

message ICEStreamInitialRequest {
  string key = 1;
}

message ICEStreamInitialResponse {
  bool approved = 1;
}

// Обмен SDP
message SessionDescription {
  string sender = 1;
  string receiver = 2;
  string type = 3; // "offer" или "answer"
  string sdp = 4;
}

// ICE-кандидат (отдельное сообщение)
message IceCandidate {
  string sdpMid = 1;
  int32 sdpMLineIndex = 2;
  string candidate = 3;
}

// Группировка ICE-кандидатов в одно сообщение
message IceCandidatesMessage {
  string sender = 1;
  string receiver = 2;
  repeated IceCandidate candidates = 3;
}